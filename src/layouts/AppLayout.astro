---
import Link from "@components/Link.astro";
import { author, defaultMeta } from "@data/socials";
import navigation from "@data/navigation.json";
import ThemeToggle from "@components/ThemeToggle.astro";
import "@fontsource/playfair-display/400.css";
import "@fontsource/playfair-display/500.css";
import "@fontsource/playfair-display/600.css";
import "@fontsource/playfair-display/700.css";
import "@fontsource/poppins/300.css";
import "@fontsource/poppins/400.css";
import "@fontsource/poppins/500.css";
import "@fontsource/poppins/600.css";
import Footer from "@components/Footer.astro";
import "@styles/global.css";

interface Props {
  title?: string;
  description?: string;
  ogImage?: {
    src: string;
    alt: string;
  };
  pubDate?: Date;
  tags?: string[];
  lastmod?: Date;
}

const {
  title,
  description = defaultMeta.description,
  ogImage = defaultMeta.ogImage,
  pubDate,
  tags = defaultMeta.keywords,
  lastmod,
} = Astro.props;

const ogImageURL = new URL(ogImage.src, Astro.site).href;
const canonicalURL = new URL(Astro.url).href;
const date = pubDate || lastmod || new Date();
const formattedDate = date instanceof Date ? date.toISOString() : date;
const keywordsString = Array.isArray(tags) ? tags.join(", ") : tags;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <title>{title || defaultMeta.title}</title>
    <link rel="canonical" href={canonicalURL} />
    <meta name="title" content={title} />
    <meta name="description" content={description} />
    <meta name="color-scheme" content="light dark" />
    <!-- SEO Tags -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={ogImageURL} />
    <meta property="og:site_name" content={author} />
    <meta property="og:image:alt" content={ogImage.alt} />
    <meta property="og:locale" content="en_US" />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="https://harryhayman.com" />
    <meta name="twitter:creator" content={author} />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={ogImageURL} />
    <meta name="twitter:image:alt" content={ogImage.alt} />
    <meta name="twitter:domain" content="harryhayman.com" />
    <meta name="theme-color" content="#7C3AED" />
    <meta name="msapplication-TileColor" content="#7C3AED" />
    <meta name="apple-mobile-web-app-title" content={title} />
    <meta name="application-name" content={title} />
    <meta name="generator" content={Astro.generator} />
    <meta name="robots" content="follow, index" />
    {tags && tags.map((tag) => <meta property="article:tag" content={tag} />)}
    <meta name="author" content={author} />
    <meta name="pubdate" content={formattedDate} />
    <meta name="date" content={formattedDate} />
    <meta name="keywords" content={keywordsString} />

    <!-- Theme initialization -->
    <script is:inline>
      (function () {
        // Check for system preference
        const prefersDark = window.matchMedia(
          "(prefers-color-scheme: dark)",
        ).matches;
        // Use system preference or fallback to stored preference
        const theme =
          localStorage.getItem("theme") || (prefersDark ? "dark" : "light");

        // Apply theme immediately
        document.documentElement.classList.toggle("dark", theme === "dark");
        document.documentElement.style.colorScheme = theme;
        document.documentElement.dataset.theme = theme;
      })();
    </script>

    <!-- AOS -->
    <link rel="stylesheet" href="https://unpkg.com/aos@2.3.4/dist/aos.css" />
    <script is:inline src="https://unpkg.com/aos@2.3.4/dist/aos.js"></script>
    <script is:inline>
      function initAOS() {
        if (typeof AOS !== "undefined") {
          AOS.init({
            duration: 700,
            easing: "ease-in-out",
            once: false,
            mirror: true,
            offset: 5,
            delay: 50,
          });
        }
      }

      // Try both events to ensure initialization
      document.addEventListener("DOMContentLoaded", initAOS);
      document.addEventListener("astro:page-load", initAOS);
      window.addEventListener("load", initAOS);
    </script>

    <!-- GSAP -->
    <script
      is:inline
      src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"
    ></script>
    <script
      is:inline
      src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/ScrollTrigger.min.js"
    ></script>
    <script is:inline>
      function initGSAP() {
        if (
          typeof gsap !== "undefined" &&
          typeof ScrollTrigger !== "undefined"
        ) {
          gsap.registerPlugin(ScrollTrigger);
        }
      }

      // Try both events to ensure initialization
      document.addEventListener("DOMContentLoaded", initGSAP);
      document.addEventListener("astro:page-load", initGSAP);
      window.addEventListener("load", initGSAP);
    </script>

    <!-- GSAP -->
    <script
      is:inline
      src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"
    ></script>
    <script
      is:inline
      src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/ScrollTrigger.min.js"
    ></script>
    <script is:inline>
      document.addEventListener("DOMContentLoaded", () => {
        if (
          typeof window.gsap !== "undefined" &&
          typeof window.ScrollTrigger !== "undefined"
        ) {
          window.gsap.registerPlugin(window.ScrollTrigger);
        }
      });
    </script>

    <!-- Lazy Loading -->
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/lazysizes/5.3.2/lazysizes.min.js"
      async></script>
  </head>
  <body>
    <div
      class="flex flex-col min-h-screen bg-[rgb(var(--background))] text-[rgb(var(--text-primary))]"
    >
      <!-- Navigation -->
      <nav
        class="sticky top-0 z-50 backdrop-blur-lg bg-[rgb(var(--background))]/80"
      >
        <div class="max-w-7xl mx-auto px-4">
          <div class="py-3 flex justify-center">
            <ul class="flex space-x-4 md:space-x-8">
              {
                navigation.map((item) => (
                  <li>
                    <Link
                      {...item}
                      addClass="font-medium text-[rgb(var(--text-secondary))] hover:text-[rgb(var(--text-primary))] text-sm md:text-base"
                    />
                  </li>
                ))
              }
            </ul>
          </div>
        </div>
      </nav>

      <!-- Theme Toggle -->
      <ThemeToggle />

      <!-- Main Content -->
      <main class="flex-grow">
        <div class="px-4 md:px-6 lg:px-8 mx-auto max-w-7xl">
          <slot />
        </div>
      </main>

      <!-- Footer -->
      <Footer />
    </div>
  </body>
</html>
